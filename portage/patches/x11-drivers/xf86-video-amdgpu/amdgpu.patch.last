--- a/src/amdgpu_kms.c   2019-03-19 18:49:55.000000000 +0100
+++ b/src/amdgpu_kms.c   2019-10-06 18:44:29.338375483 +0200
@@ -24,6 +24,13 @@
  *	Dave Airlie <airlied@redhat.com>
  *
  */
+#include <stdio.h>
+#include <sys/wait.h>
+#include <pthread.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#define DRM_HACK_SOCKET_NAME "xorg_drm_master_util"
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -62,6 +69,59 @@
 
 #include <gbm.h>
 
+static int
+send_fd(int sock, int fd)
+{
+	// This function does the arcane magic for sending
+	// file descriptors over unix domain sockets
+	struct msghdr msg;
+	struct iovec iov[1];
+	struct cmsghdr *cmsg = NULL;
+	char ctrl_buf[CMSG_SPACE(sizeof(int))];
+	char data[1];
+
+	memset(&msg, 0, sizeof(struct msghdr));
+	memset(ctrl_buf, 0, CMSG_SPACE(sizeof(int)));
+
+	data[0] = ' ';
+	iov[0].iov_base = data;
+	iov[0].iov_len = sizeof(data);
+
+	msg.msg_name = NULL;
+	msg.msg_namelen = 0;
+	msg.msg_iov = iov;
+	msg.msg_iovlen = 1;
+	msg.msg_controllen =  CMSG_SPACE(sizeof(int));
+	msg.msg_control = ctrl_buf;
+
+	cmsg = CMSG_FIRSTHDR(&msg);
+	cmsg->cmsg_level = SOL_SOCKET;
+	cmsg->cmsg_type = SCM_RIGHTS;
+	cmsg->cmsg_len = CMSG_LEN(sizeof(int));
+
+	*((int *) CMSG_DATA(cmsg)) = fd;
+
+	return sendmsg(sock, &msg, 0);
+}
+
+static void*
+thread_func(void* argument)
+{
+	int ret;
+	int option = *(int *)argument;
+	char cmd[32];
+	sprintf(cmd, "/usr/bin/drm_master_util %s -r", (!option ? "-s" : "-d"));
+
+	ret = system(cmd);
+	if (ret == -1 || WEXITSTATUS(ret) != 0) {
+		fprintf(stderr, "%s\n", strerror(errno));
+		//exit(1);
+	}
+
+	pthread_exit(NULL); // you could also return NULL here to exit no difference
+}
+
+
 static DevPrivateKeyRec amdgpu_window_private_key;
 static DevScreenPrivateKeyRec amdgpu_client_private_key;
 DevScreenPrivateKeyRec amdgpu_device_private_key;
@@ -1820,7 +1880,12 @@
 static Bool amdgpu_set_drm_master(ScrnInfoPtr pScrn)
 {
	AMDGPUEntPtr pAMDGPUEnt = AMDGPUEntPriv(pScrn);
-	int err;
+	int err = 0;
+	pthread_t my_thread;
+	struct sockaddr_un addr;
+	int sock, conn, option = 0;
+
+
 
 #ifdef XF86_PDEV_SERVER_FD
	if (pAMDGPUEnt->platform_dev &&
@@ -1828,9 +1893,21 @@
	   return TRUE;
 #endif
 
-	err = drmSetMaster(pAMDGPUEnt->fd);
-	if (err)
-		ErrorF("Unable to retrieve master\n");
+	sock = socket(AF_UNIX, SOCK_STREAM, 0);
+	memset(&addr, 0, sizeof(addr));
+	addr.sun_family = AF_UNIX;
+	strcpy(&addr.sun_path[1], DRM_HACK_SOCKET_NAME);
+	bind(sock, (struct sockaddr *)&addr, sizeof(addr));
+
+	listen(sock, 1);
+	pthread_create(&my_thread, NULL, thread_func, &option);
+
+	conn = accept(sock, NULL, 0);
+	send_fd(conn, pAMDGPUEnt->fd);
+	close(conn);
+	close(sock);
+
+	pthread_join(my_thread, NULL);
 
	return err == 0;
 }
@@ -1838,6 +1915,10 @@
 static void amdgpu_drop_drm_master(ScrnInfoPtr pScrn)
 {
	AMDGPUEntPtr pAMDGPUEnt = AMDGPUEntPriv(pScrn);
+	pthread_t my_thread;
+	struct sockaddr_un addr;
+	int sock, conn, option = 1;
+
 
 #ifdef XF86_PDEV_SERVER_FD
	if (pAMDGPUEnt->platform_dev &&
@@ -1845,7 +1926,23 @@
	   return;
 #endif
 
-	drmDropMaster(pAMDGPUEnt->fd);
+	sock = socket(AF_UNIX, SOCK_STREAM, 0);
+	memset(&addr, 0, sizeof(addr));
+	addr.sun_family = AF_UNIX;
+	strcpy(&addr.sun_path[1], DRM_HACK_SOCKET_NAME);
+	bind(sock, (struct sockaddr *)&addr, sizeof(addr));
+
+	listen(sock, 1);
+	pthread_create(&my_thread, NULL, thread_func, &option);
+
+	conn = accept(sock, NULL, 0);
+	send_fd(conn, pAMDGPUEnt->fd);
+	close(conn);
+	close(sock);
+
+	pthread_join(my_thread, NULL);
+
+
 }
