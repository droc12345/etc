--- a/main.c	2021-04-24 07:50:47.480119566 -0500
+++ b/main.c	2021-04-24 15:56:07.887749832 -0500
@@ -1,3 +1,5 @@
+#include <ctype.h>
+#include <dirent.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <stdbool.h>
@@ -10,6 +12,7 @@
 #include <assert.h>
 
 #include <sys/signalfd.h>
+#include <sys/stat.h>
 
 #include <wayland-client.h>
 #include <wayland-cursor.h>
@@ -36,6 +39,10 @@
 static struct wl_compositor *compositor;
 static struct wl_shm *shm;
 static struct zwlr_layer_shell_v1 *layer_shell;
+int exit_code = EXIT_FAILURE;
+int sig_fd = -1;
+FILE *fp;
+char **files_img;
 
 static bool have_xrgb8888 = false;
 
@@ -326,53 +333,19 @@
     .global_remove = &handle_global_remove,
 };
 
-int
-main(int argc, const char *const *argv)
-{
-    if (argc < 2) {
-        fprintf(stderr, "error: missing required argument: image path\n");
-        return EXIT_FAILURE;
-    }
-
-    setlocale(LC_CTYPE, "");
-    log_init(LOG_COLORIZE_AUTO, false, LOG_FACILITY_DAEMON, LOG_CLASS_WARNING);
-
-    const char *image_path = argv[1];
-    image = NULL;
-
-    FILE *fp = fopen(image_path, "rb");
-    if (fp == NULL) {
-        LOG_ERRNO("%s: failed to open", image_path);
-        return EXIT_FAILURE;
-    }
-
-#if defined(WBG_HAVE_JPG)
-    if (image == NULL)
-        image = jpg_load(fp, image_path);
-#endif
-#if defined(WBG_HAVE_PNG)
-    if (image == NULL)
-        image = png_load(fp, image_path);
-#endif
-    if (image == NULL) {
-        fprintf(stderr, "error: %s: failed to load\n", image_path);
-        fclose(fp);
-        return EXIT_FAILURE;
-    }
-
-    int exit_code = EXIT_FAILURE;
-    int sig_fd = -1;
+static int 
+display_init() {
 
     display = wl_display_connect(NULL);
     if (display == NULL) {
         LOG_ERR("failed to connect to wayland; no compositor running?");
-        goto out;
+        return 1;
     }
 
     registry = wl_display_get_registry(display);
     if (registry == NULL)  {
         LOG_ERR("failed to get wayland registry");
-        goto out;
+        return 1;
     }
 
     wl_registry_add_listener(registry, &registry_listener, NULL);
@@ -380,15 +353,15 @@
 
     if (compositor == NULL) {
         LOG_ERR("no compositor");
-        goto out;
+        return 1;
     }
     if (shm == NULL) {
         LOG_ERR("no shared memory buffers interface");
-        goto out;
+        return 1;
     }
     if (layer_shell == NULL) {
         LOG_ERR("no layer shell interface");
-        goto out;
+        return 1;
     }
 
     tll_foreach(outputs, it)
@@ -398,7 +371,88 @@
 
     if (!have_xrgb8888) {
         LOG_ERR("shm: XRGB image format not available");
-        goto out;
+        return 1;
+    }
+    return 0;
+}
+
+static void 
+display_close () {
+    if (sig_fd >= 0)
+        close(sig_fd);
+
+    tll_foreach(outputs, it)
+        output_destroy(&it->item);
+    tll_free(outputs);
+
+    if (layer_shell != NULL)
+        zwlr_layer_shell_v1_destroy(layer_shell);
+    if (shm != NULL)
+        wl_shm_destroy(shm);
+    if (compositor != NULL)
+        wl_compositor_destroy(compositor);
+    if (registry != NULL)
+        wl_registry_destroy(registry);
+    if (display != NULL)
+        wl_display_disconnect(display);
+    if (image != NULL) {
+        free(pixman_image_get_data(image));
+        pixman_image_unref(image);
+    }
+    log_deinit();
+    fclose(fp);
+    exit(exit_code);
+}
+
+int
+main(int argc, char *argv[])
+{
+    setlocale(LC_CTYPE, "");
+    log_init(LOG_COLORIZE_AUTO, false, LOG_FACILITY_DAEMON, LOG_CLASS_WARNING);
+
+    char *image_path = NULL;
+    char *dir_path;
+    int image_cnt = 0;
+
+    int c;
+    int dir = 0;
+    int timer = -1;
+    int random = 0;
+
+    opterr = 0;
+    while ((c = getopt (argc, argv, "rt:")) != -1)
+        switch (c)
+        {
+          case 'r':
+            random = 1;
+            break;
+          case 't':
+            timer = atoi(optarg);
+            break;
+          default:
+            fprintf(stderr, "Usage:\n%s [-t sec] [-r] <file/dir name>\n", argv[0]);
+            fprintf(stderr, "        -t timer seconds\n");
+            fprintf(stderr, "        -r random yes (default no)\n");
+            exit(0);
+        }
+
+    if (optind >= argc) {
+        fprintf(stderr, "Usage:\n%s [-t sec] [-r] <file/dir name>\n", argv[0]);
+        fprintf(stderr, "        -t timer seconds\n");
+        fprintf(stderr, "        -r random yes (default no)\n");
+        fprintf(stderr, "*** image path is required ***\n");
+        return EXIT_FAILURE;
+    }
+
+    struct stat path_stat;
+    stat(argv[1], &path_stat);
+    if (S_ISDIR(path_stat.st_mode)) {
+        dir = 1;    
+        dir_path = argv[1];
+    } else {
+        random = 0;
+        timer = -1;
+	image_path = argv[1];
     }
 
     sigset_t mask;
@@ -410,81 +464,147 @@
 
     if ((sig_fd = signalfd(-1, &mask, 0)) < 0) {
         LOG_ERRNO("failed to create signal FD");
-        goto out;
+        exit(1);
     }
 
-    while (true) {
-        wl_display_flush(display);
+    if (display_init() != 0)
+        display_close();
 
-        struct pollfd fds[] = {
-            {.fd = wl_display_get_fd(display), .events = POLLIN},
-            {.fd = sig_fd, .events = POLLIN},
-        };
-        int ret = poll(fds, sizeof(fds) / sizeof(fds[0]), -1);
+/**** handle directory of files */
 
-        if (ret < 0) {
-            if (errno == EINTR)
-                continue;
+    if (dir == 1) {
+        int n = 0;
+        DIR *d;
+        struct dirent *dir;
 
-            LOG_ERRNO("failed to poll");
-            break;
+        d = opendir(dir_path);
+
+        /* Determine the number of files */
+        while((dir = readdir(d)) != NULL) {
+            /* look for *.jpg, *.png */
+            if ( !strcmp(dir->d_name, ".") || !strcmp(dir->d_name, "..") )
+            {
+                ;
+            } else {
+                n++;
+            }
         }
+        rewinddir(d);
 
-        if (fds[0].revents & POLLHUP) {
-            LOG_WARN("disconnected by compositor");
-            break;
+        char *filesList[n];
+
+        /* Put file names into the array */
+        while((dir = readdir(d)) != NULL) {
+            if ( !strcmp(dir->d_name, ".") || !strcmp(dir->d_name, "..") ) {
+                ;
+            } else {
+                filesList[image_cnt] = (char*) malloc (strlen(dir->d_name) + 1);
+                memcpy (filesList[image_cnt], dir->d_name, strlen(dir->d_name));
+                image_cnt++;
+            }
         }
+        rewinddir(d);
+	files_img = filesList;
+    }
 
-        if (fds[0].revents & POLLIN)
-            wl_display_dispatch(display);
 
-        if (fds[1].revents & POLLHUP)
-            abort();
+/* start loop IF dir instead of single file */
+    int image_index = 0;
+    char new_path[100];
+    while (1) {
+        image = NULL;
+
+        if (dir == 1) {
+            strcpy(new_path, dir_path);
+            strcat(new_path, "/");
+
+            if (random == 1) {
+                strcat(new_path, files_img[rand() % image_cnt]);
+            } else {
+                strcat(new_path, files_img[image_index]);
+                image_index++;
+		if (image_index >= image_cnt)
+                    image_index = 0;
+	    }
+            image_path = new_path;
+        }
 
-        if (fds[1].revents & POLLIN) {
-            struct signalfd_siginfo info;
-            ssize_t count = read(sig_fd, &info, sizeof(info));
-            if (count < 0) {
+        fp = fopen(image_path, "rb");
+        if (fp == NULL) {
+            LOG_ERRNO("%s: failed to open", image_path);
+            return EXIT_FAILURE;
+        }
+
+#if defined(WBG_HAVE_JPG)
+        if (image == NULL)
+            image = jpg_load(fp, image_path);
+#endif
+#if defined(WBG_HAVE_PNG)
+        if (image == NULL)
+            image = png_load(fp, image_path);
+#endif
+        if (image == NULL) {
+            if (dir == 1)
+                continue;
+            fprintf(stderr, "error: %s: failed to load\n", image_path);
+            fclose(fp);
+            return EXIT_FAILURE;
+        }
+
+        int err_no = 0;
+        while (true) {
+            wl_display_flush(display);
+
+            struct pollfd fds[] = {
+                {.fd = wl_display_get_fd(display), .events = POLLIN},
+                {.fd = sig_fd, .events = POLLIN},
+            };
+            int ret = poll(fds, sizeof(fds) / sizeof(fds[0]), timer);
+
+            if (ret < 0) {
                 if (errno == EINTR)
                     continue;
 
-                LOG_ERRNO("failed to read from signal FD");
+                LOG_ERRNO("failed to poll");
+		err_no = 1;
                 break;
             }
 
-            assert(count == sizeof(info));
-            assert(info.ssi_signo == SIGINT || info.ssi_signo == SIGQUIT);
+            if (fds[0].revents & POLLHUP) {
+                LOG_WARN("disconnected by compositor");
+		err_no = 1;
+                break;
+            }
 
-            LOG_INFO("goodbye");
-            exit_code = EXIT_SUCCESS;
-            break;
-        }
-    }
+            if (fds[0].revents & POLLIN)
+                wl_display_dispatch(display);
 
-out:
+            if (fds[1].revents & POLLHUP)
+                abort();
 
-    if (sig_fd >= 0)
-        close(sig_fd);
+            if (fds[1].revents & POLLIN) {
+                struct signalfd_siginfo info;
+                ssize_t count = read(sig_fd, &info, sizeof(info));
+                if (count < 0) {
+                    if (errno == EINTR)
+                        continue;
+
+                    LOG_ERRNO("failed to read from signal FD");
+		    err_no = 1;
+                    break;
+                }
 
-    tll_foreach(outputs, it)
-        output_destroy(&it->item);
-    tll_free(outputs);
+                assert(count == sizeof(info));
+                assert(info.ssi_signo == SIGINT || info.ssi_signo == SIGQUIT);
 
-    if (layer_shell != NULL)
-        zwlr_layer_shell_v1_destroy(layer_shell);
-    if (shm != NULL)
-        wl_shm_destroy(shm);
-    if (compositor != NULL)
-        wl_compositor_destroy(compositor);
-    if (registry != NULL)
-        wl_registry_destroy(registry);
-    if (display != NULL)
-        wl_display_disconnect(display);
-    if (image != NULL) {
-        free(pixman_image_get_data(image));
-        pixman_image_unref(image);
+		err_no = 1;
+                break;
+            }
+        }
+	if ((err_no != 0) || (dir == 0))
+            break;
     }
-    log_deinit();
-    fclose(fp);
-    return exit_code;
+/* end of while directory images */
+    exit_code = 0;
+    display_close();
 }
